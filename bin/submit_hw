#!/usr/bin/env ruby
require 'json'
require 'yaml'
require 'colorize'
require 'io/console'
require 'octokit'

# TODO (phlco) remove Hub dependency and use github gem/api directly

# TODO (phlco) we could move this to installfest too

unless `git config --get user.username`.empty? == false
  puts "Please enter your Github username (it should be case sensitive). MAKE SURE IT'S CORRECT!" # we could say lowercase here.
  github_username = gets.chomp
  puts "Please confirm that #{github_username} is your correct Github username (Y/n)"
  answer = gets.chomp
  if answer.downcase == 'y'
    system("git config --add user.username '#{github_username}'")
  else
    puts "You have indicated that your Github username was entered incorrectly. Please run the program again and enter it correctly"
    exit(false)
  end

end

unless File.exists? File.expand_path(".config/hub","~")
  puts "You haven't used the GitHub API with Hub before."
  puts "We need your credentials (one time)."
  print "Please enter your GitHub username: "
  username = gets.chomp
  print "Please enter your GitHub password: "
  password = $stdin.noecho(&:gets).chomp
  puts

  client = Octokit::Client.new \
    :login    => username,
    :password => password

  begin
    client.user # check for bad auth and fail
  rescue
    puts "Authentication error. Check your username and password."
    exit(false)
  end

  # add random nuber to token name to allow multiple tokens
  random_number = (Random.rand * 10000).to_i

  response = client.create_authorization \
    :scopes => ["user","repo"],
    :note => "hub token added by submit_hw [#{random_number}]"

  hub_config = {
    "github.com" => [
      {
        "oauth_token" => response[:token],
        "user"        => username
      }
    ]
  }.to_yaml

  # ensure ~/.config exists
  FileUtils.mkdir_p File.expand_path(".config","~")

  File.write(File.expand_path(".config/hub","~"), hub_config)
end

# def prompt_to_reload
#   puts "WARNING: this script changed your ~/.bash_profile file." + \
#        " When possible immediately run the following command:".yellow
#   puts " $ reload"
#   puts "or, if that fails:".yellow
#   puts " $ source ~/.bash_profile"
# end

def exit_script
  puts "Please type 'submit_hw' and restart the submission process"
  exit(false)
end

data = {}

# print "\nHow many parts of the homework did you finish? "
# data["completeness"] = gets

# begin
#   data["completeness"] = Integer(data["completeness"])
#   raise ArgumentError if data["completeness"] < 0
# rescue ArgumentError
#   puts "Invalid: not an integer (0 or greater)".red
#   exit_script
# end

print "Comfortability [1 - 5]? "
data["comfortability"] = gets.gsub(/\W+/, '').to_i

unless (1..5).member?(data["comfortability"])
  puts "Invalid numbers (only 1 - 5)".red
  exit_script
end

# github_name  = `git config --get user.name`.strip
github_name = `git config --get user.username`.chomp

puts "Pushing your work to your fork.\n".green
`git push origin master`
puts

begin
  upstream = `git config --get remote.upstream.url`.strip.match(/:(.*)\.git/).captures.first
rescue NoMethodError
  # Upstream has not been set
  puts "You haven't configured a remote that points to the upstream repository!".red
  puts "Run the following then try again:".red
  puts " $ git remote add upstream CLASS_REPO_SSH_URL"
  exit_script
end

# reconstituted_name = github_name.split('_').map(&:capitalize).join(' ')
branch       = "#{upstream}:#{github_name}"
submitted_at = Time.now.strftime("%H:%m")
submitted_on = Time.now.strftime('%Y-%m-%d')
message      = "HW for #{github_name}: #{submitted_on} at #{submitted_at}\n\n#{data.to_json}"

submission = `hub pull-request -m '#{message}' -b '#{branch}' 2>&1` # print to STDOUT

# puts submission

if submission.include? "pull request already exists"
  puts "You already have an outstanding pull request which the instructors have yet to merge! Have a great day.".yellow
elsif submission.include? "Error creating pull request: Internal Server Error (HTTP 500)"
  puts "We may not have an upstream branch for you yet. Contact your Instructors!".yellow
elsif submission.include? "No commits between"
  # NOTE: (phlco) we'll ignore this for now becuase we probably won't get this error.
  puts "You haven't commited any changes.".red
else
  puts "Thanks for submitting your homework.".green
end
